{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "bBPF",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#invalid"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#qualifiers"
    },
    {
      "include": "#logical-operators"
    },
    {
      "include": "#bitwise-operators"
    },
    {
      "include": "#comparison-operators"
    },
    {
      "include": "#arithmetic-operators"
    },
    {
      "include": "#structure"
    },
    {
      "include": "#special-values"
    },
    {
      "include": "#numeric-values"
    }
  ],
  "repository": {
    "qualifiers": {
      "patterns": [
        {
          "name": "keyword.control.bpf.type",
          "match": "host|net|portrange|port|proto|protochain|mask"
        },
        {
          "name": "keyword.control.bpf.dir",
          "match": "src|dst|src and dst|src or dst"
        },
        {
          "name": "keyword.control.bpf.proto.ether",
          "match": "ip|ip6|arp|rarp|atalk|aarp|decnet|iso|stp|ipx|netbe|lat|moprc|mopdl"
        },
        {
          "name": "keyword.control.bpf.proto",
          "match": "udp|decnet|ip|icmp|tcp|wlan|radio|ppp|link|ip6|fddi|rarp|arp|tr|ether|slip|llc"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.bpf.length",
          "match": "length|len"
        },
        {
          "name": "keyword.control.bpf.length",
          "match": "(greater|less) (\\d+|0x[a-zA-Z0-9]{2}|0x[a-zA-Z0-9]{4})",
          "captures": {
            "1": {
              "name": "keyword.control.bpf.length"
            },
            "2": {
              "name": "constant.numeric.bpf"
            }
          }
        },
        {
          "name": "keyword.control.bpf",
          "match": "gateway|broadcast|multicast"
        },
        {
          "name": "keyword.control.tcp-flags",
          "match": "tcp-fin|tcp-syn|tcp-rst|tcp-push|tcp-ack|tcp-urg|tcp-ece|tcp-cwr"
        },
        {
          "name": "keyword.control.icmp-types",
          "match": "icmp-echoreply|icmp-unreach|icmp-sourcequench|icmp-redirect|icmp-echo|icmp-routeradvert|icmp-routersolicit|icmp-timxceed|icmp-paramprob|icmp-tstamp|icmp-tstampreply|icmp-ireq|icmp-ireqreply|icmp-maskreq|icmp-maskreply"
        }
      ]
    },
    "logical-operators": {
      "patterns": [
        {
          "name": "keyword.operator.bpf.logical.binary",
          "match": "and|&&|or|\\|\\|"
        },
        {
          "name": "keyword.operator.bpf.logical.unary",
          "match": "not|!"
        }
      ]
    },
    "comparison-operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.bpf",
          "match": "!=|=|>|>=|<|<="
        }
      ]
    },
    "bitwise-operators": {
      "patterns": [
        {
          "name": "keyword.operator.bitwise.bpf",
          "match": "&|\\||>>|<<"
        }
      ]
    },
    "arithmetic-operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.bpf",
          "match": "\\+|\\-|\\*|/"
        }
      ]
    },
    "structure": {
      "patterns": [
        {
          "name": "meta.structure.bpf.slice.open",
          "match": "\\["
        },
        {
          "name": "meta.structure.bpf.slice.close",
          "match": "\\]"
        },
        {
          "name": "meta.structure.bpf.slice.colon",
          "match": ":"
        },
        {
          "name": "meta.structure.bpf.punctuation.parentheses.open",
          "match": "\\("
        },
        {
          "name": "meta.structure.bpf.punctuation.parentheses.close",
          "match": "\\)"
        },
        {
          "name": "meta.structure.bpf.punctuation.space",
          "match": " "
        }
      ]
    },
    "special-values": {
      "patterns": [
        {
          "name": "constant.bpf.addr.ip",
          "match": "\\d{1,3}(\\.\\d{1,3}){1,3}"
        },
        {
          "name": "constant.bpf.addr.ip",
          "match": "(\\.\\d{1,3}){4}/\\d{1,2}"
        },
        {
          "name": "constant.bpf.addr.mac",
          "match": "([a-fA-F0-9]{2}:){5}[a-fA-F0-9]{2}"
        }
      ]
    },
    "numeric-values": {
      "patterns": [
        {
          "name": "constant.numeric.hex.bpf",
          "match": "0x[a-fA-F0-9]{8}|0x[a-fA-F0-9]{4}"
        },
        {
          "name": "constant.numeric.dec.bpf",
          "match": "\\d+"
        }
      ]
    },
    "invalid": {
      "patterns": [
        {
          "name": "invalid.illegal.bpf",
          "match": "[$@#`~\\\\{}\\.]"
        },
        {
          "name": "invalid.illegal.bpf",
          "match": "//+"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "match": "(//) .*$",
          "name": "comment.line",
          "captures": {
            "1": {
              "name": "comment.line.double-dash"
            }
          }
        },
        {
          "begin": "/\\*",
          "end": "\\*/",
          "name": "comment.block",
          "beginCaptures": {
            "0": {
              "name": "comment.block.start"
            }
          },
          "endCaptures": {
            "0": {
              "name": "comment.block.end"
            }
          }
        }
      ]
    }
  },
  "scopeName": "source.bbpf"
}